require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

require 'user/answers_controller'
RSpec.describe User::AnswersController, type: :controller do
  include Devise::TestHelpers

  let!(:user1) { create(:user) }
  let!(:question1) { create(:question, user: user1) }

  # This should return the minimal set of attributes required to create a valid
  # Answer. As you add validations to Answer, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:answer, user:user1, question:question1)
  }

  let(:invalid_attributes) {
    attributes_for(:answer, body:nil)
  }

  before do
    @request.env["devise.mapping"] = Devise.mappings[:user]
    sign_in user1
  end

  describe "GET #new" do
    it "assigns a new answer as @answer" do
      get :new, {question_id: question1.to_param}
      expect(assigns(:answer)).to be_a_new(Answer)
    end
  end

  describe "GET #edit" do
    it "assigns the requested answer as @answer" do
      answer = Answer.create! valid_attributes
      get :edit, {question_id: question1.to_param, :id => answer.to_param}
      expect(assigns(:answer)).to eq(answer)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Answer" do
        expect {
          post :create, {question_id: question1.to_param, :answer => valid_attributes}, {referer: root_url}
        }.to change(Answer, :count).by(1)
      end

      it "assigns a newly created answer as @answer" do
        post :create, {question_id: question1.to_param, :answer => valid_attributes}, {referer: root_url}
        expect(assigns(:answer)).to be_a(Answer)
        expect(assigns(:answer)).to be_persisted
      end

      it "redirects to the created answer" do
        post :create, {question_id: question1.to_param, :answer => valid_attributes}, {referer: root_url}
        expect(response).to redirect_to(root_url)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved answer as @answer" do
        post :create, {question_id: question1.to_param, :answer => invalid_attributes}, {referer: root_url}
        expect(assigns(:answer)).to be_a_new(Answer)
      end

      it "re-renders the 'new' template" do
        post :create, {question_id: question1.to_param, :answer => invalid_attributes}, {referer: root_url}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {body: "NEW BODY"}
      }

      it "updates the requested answer" do
        answer = Answer.create! valid_attributes
        put :update, {question_id: question1.to_param, :id => answer.to_param, :answer => new_attributes}
        answer.reload
        expect(assigns(:answer)).to eq(answer)
      end

      it "assigns the requested answer as @answer" do
        answer = Answer.create! valid_attributes
        put :update, {question_id: question1.to_param, :id => answer.to_param, :answer => valid_attributes}
        expect(assigns(:answer)).to eq(answer)
      end

      it "redirects to the answer" do
        answer = Answer.create! valid_attributes
        put :update, {question_id: question1.to_param, :id => answer.to_param, :answer => valid_attributes}
        expect(response).to redirect_to([question1, answer])
      end
    end

    context "with invalid params" do
      it "assigns the answer as @answer" do
        answer = Answer.create! valid_attributes
        put :update, {question_id: question1.to_param, :id => answer.to_param, :answer => invalid_attributes}
        expect(assigns(:answer)).to eq(answer)
      end

      it "re-renders the 'edit' template" do
        answer = Answer.create! valid_attributes
        put :update, {question_id: question1.to_param, :id => answer.to_param, :answer => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested answer" do
      answer = Answer.create! valid_attributes
      expect {
        delete :destroy, {question_id: question1.to_param, :id => answer.to_param}, {referer: root_url}
      }.to change(Answer, :count).by(-1)
    end

    it "redirects to the answers list" do
      answer = Answer.create! valid_attributes
      delete :destroy, {question_id: question1.to_param, :id => answer.to_param}, {referer: root_url}
      expect(response).to redirect_to(question_url(question1))
    end
  end

end
